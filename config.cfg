"""
Name: Dominique Saile
Student ID: 105978
Email: sailedom@hs-albsig.de
Date: 22. May 2024
"""

import configparser
from pathlib import Path
from modules.universe import Universe
from modules.ruleset import Ruleset

class GameController:
    """
    This class controls the execution of Conway's Game of Life.
    
    Attributes:
        config (configparser.ConfigParser): The configuration settings for the game.
        universe (Universe): The universe where the game takes place.
    """
    
    def __init__(self, config_file: Path):
        """
        Initializes the GameController with a configuration file.
        
        Args:
            config_file (Path): Path to the configuration file.
        
        Raises:
            ValueError: If the configuration file is not found or is invalid.
        """
        self.config = self._read_config(config_file)
        self.universe = self._setup_game()

    def _read_config(self, config_file: Path) -> configparser.ConfigParser:
        """
        Reads the configuration file and returns a ConfigParser object.
        
        Args:
            config_file (Path): Path to the configuration file.
        
        Returns:
            configparser.ConfigParser: The parsed configuration settings.
        
        Raises:
            ValueError: If the configuration file is not found or is invalid.
        """
        config = configparser.ConfigParser()
        if not config.read(config_file):
            raise ValueError(f"Configuration file {config_file} not found or invalid.")
        return config

    def _setup_game(self) -> Universe:
        """
        Sets up the game by initializing the universe based on the configuration settings.
        
        Returns:
            Universe: The initialized universe for the game.
        
        Raises:
            ValueError: If the configuration settings are invalid.
        """
        try:
            height = self.config.getint('GAME', 'height')
            width = self.config.getint('GAME', 'width')
            iterations = self.config.getint('GAME', 'iterations')
            ruleset_str = self.config.get('GAME', 'ruleset')
            p_cell_alive = self.config.getfloat('GAME', 'p_cell_alive')
            char_alive = self.config.get('VISUAL', 'char_alive')
            char_dead = self.config.get('VISUAL', 'char_dead')
            wait_time = self.config.getfloat('VISUAL', 'wait_time')
            
            ruleset = Ruleset(ruleset_str)
            universe = Universe(height, width, ruleset, p_cell_alive, char_alive, char_dead)
            self.iterations = iterations
            self.wait_time = wait_time
            return universe
        except (configparser.NoOptionError, configparser.NoSectionError, ValueError) as e:
            raise ValueError(f"Invalid configuration: {e}")

    def run_game(self):
        """
        Runs the game for the specified number of iterations.
        """
        import time
        for iteration in range(self.iterations):
            print(f"Iteration {iteration + 1}")
            self.universe.run_one_iteration()
            time.sleep(self.wait_time)
        
        while True:
            response = input("Continue the game? (yes/no): ").strip().lower()
            if response == 'yes':
                self.universe.run_one_iteration()
                time.sleep(self.wait_time)
            elif response == 'no':
                break
            else:
                print("Invalid response. Please type 'yes' or 'no'.")
